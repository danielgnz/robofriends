{"version":3,"sources":["Reducers.js","Actions.js","api/api.js","Constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","err","Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","map","robot","i","components_Card","key","SearchBox","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c8cef62a.chunk.js","sourcesContent":["import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\trobots: [],\r\n\tisPending: false,\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nimport { apiCall } from './api/api';\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tapiCall('https://jsonplaceholder.typicode.com/users/')\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n};","export const apiCall = (link) =>\r\n\tfetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCES';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}+${name}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t// if(robots){\r\n\t// \treturn <h1>No match</h1>\r\n\t// }\r\n\t// if(true){\r\n\t// \tthrow new Error('Noooooo');\r\n\t// }\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((robot, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={`${robots[i].id}+${robots[i].name}`}\r\n\t\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\taria-label=\"Search Robots\"\r\n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\ttype=\"search\"\r\n\t\t\tplaceholder=\"search robots\"\r\n\t\t\tonChange={searchChange} />\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={ {overflowY: 'scroll', border: '1px solid black', height: '500px'} }>\r\n\t\t\t{ props.children }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({\r\n\t\t\thasError: true\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Ooops. Something went wrong</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../Actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchField, onSearchChange, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t <div id=\"main\" className=\"tc\">\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t{ \r\n\t\t\t\t\tisPending\r\n\t\t\t\t \t? <h1 className=\"tc f1 sega t-shadow\">Loading...</h1>\r\n\t\t\t\t \t: <ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t  </ErrorBoundary>\r\n\t\t\t\t}\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// action done from mapDispatchToProps will change state from mapStateToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { searchRobots, requestRobots } from './Reducers';\r\n\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport 'tachyons';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}